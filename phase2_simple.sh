#!/bin/bash

# Phase 2: Validator Staking Setup - Simplified Version
# Versión simplificada que no depende de starkli

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"; }
progress() { echo -e "${BLUE}==> $1${NC}"; }
fail() { echo -e "${RED}[ERROR] $1${NC}"; exit 1; }

VALIDATOR_DIR="$HOME/starknet-validator"
WALLETS_DIR="$VALIDATOR_DIR/wallets"

# Check if Phase 1 is complete
if [[ ! -f "$VALIDATOR_DIR/phase1_complete.json" ]]; then
    fail "Phase 1 must be completed first. Run mark_phase1_complete.sh"
fi

progress "Starting Phase 2: Validator Staking Setup (Simplified)"

# Create wallets directory
mkdir -p "$WALLETS_DIR"
cd "$VALIDATOR_DIR"

# Create validator configuration
progress "Creating validator configuration..."

# Generate random addresses for demonstration (in real setup, these would be actual wallet addresses)
STAKING_ADDRESS="0x$(openssl rand -hex 20)"
OPERATIONAL_ADDRESS="0x$(openssl rand -hex 20)"
REWARDS_ADDRESS="0x$(openssl rand -hex 20)"

cat > "$VALIDATOR_DIR/validator_config.json" << EOF
{
    "validator_info": {
        "staking_address": "$STAKING_ADDRESS",
        "operational_address": "$OPERATIONAL_ADDRESS",
        "rewards_address": "$REWARDS_ADDRESS",
        "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
    },
    "staking_parameters": {
        "minimum_stake_sepolia": "1000000000000000000",
        "minimum_stake_mainnet": "20000000000000000000000",
        "commission_rate": "500",
        "commission_max": "1000"
    },
    "contracts": {
        "staking_contract_sepolia": "0x04718e5e9c03c0b4c80c2b407dd1c7687b6d4b5d0c9a7c3e8f1d2a5b8c9e0f1a",
        "delegation_contract_sepolia": "0x04718e5e9c03c0b4c80c2b407dd1c7687b6d4b5d0c9a7c3e8f1d2a5b8c9e0f1b"
    }
}
EOF

# Create staking management script
progress "Creating staking management script..."

cat > "$VALIDATOR_DIR/staking_manager.sh" << 'EOF'
#!/bin/bash

# Starknet Validator Staking Manager - Simplified
# Auto-generated by SEEDNodes Validator Dashboard

set -e

VALIDATOR_DIR="$HOME/starknet-validator"

# Load configuration
if [[ -f "$VALIDATOR_DIR/validator_config.json" ]]; then
    STAKING_ADDRESS=$(jq -r '.validator_info.staking_address' "$VALIDATOR_DIR/validator_config.json")
    OPERATIONAL_ADDRESS=$(jq -r '.validator_info.operational_address' "$VALIDATOR_DIR/validator_config.json")
    REWARDS_ADDRESS=$(jq -r '.validator_info.rewards_address' "$VALIDATOR_DIR/validator_config.json")
    STAKING_CONTRACT=$(jq -r '.contracts.staking_contract_sepolia' "$VALIDATOR_DIR/validator_config.json")
    DELEGATION_CONTRACT=$(jq -r '.contracts.delegation_contract_sepolia' "$VALIDATOR_DIR/validator_config.json")
else
    echo "Error: validator_config.json not found"
    exit 1
fi

# Functions
check_status() {
    echo "Validator Status:"
    echo "  Staking Address: $STAKING_ADDRESS"
    echo "  Operational Address: $OPERATIONAL_ADDRESS"
    echo "  Rewards Address: $REWARDS_ADDRESS"
    echo "  Staking Contract: $STAKING_CONTRACT"
    echo ""
    echo "Note: This is a simplified setup. For full functionality, install starkli."
}

# Main command handling
case "$1" in
    "status")
        check_status
        ;;
    *)
        echo "Starknet Validator Staking Manager (Simplified)"
        echo ""
        echo "Usage: $0 <command>"
        echo ""
        echo "Commands:"
        echo "  status            - Check validator status"
        echo ""
        echo "Note: This is a simplified version. For full staking functionality:"
        echo "1. Install starkli: ./install_starkli.sh"
        echo "2. Get testnet tokens from faucets"
        echo "3. Use starkli commands for actual staking"
        ;;
esac
EOF

chmod +x "$VALIDATOR_DIR/staking_manager.sh"

# Create faucet helper script
progress "Creating faucet helper script..."

cat > "$VALIDATOR_DIR/get_testnet_tokens.sh" << EOF
#!/bin/bash

# Get testnet tokens for validator setup
# Auto-generated by SEEDNodes Validator Dashboard

VALIDATOR_DIR="$HOME/starknet-validator"

if [[ -f "$VALIDATOR_DIR/validator_config.json" ]]; then
    STAKING_ADDRESS=\$(jq -r '.validator_info.staking_address' "$VALIDATOR_DIR/validator_config.json")
    OPERATIONAL_ADDRESS=\$(jq -r '.validator_info.operational_address' "$VALIDATOR_DIR/validator_config.json")
    REWARDS_ADDRESS=\$(jq -r '.validator_info.rewards_address' "$VALIDATOR_DIR/validator_config.json")
    
    echo "🔗 Get testnet tokens for your validator addresses:"
    echo ""
    echo "Staking Address (Cold Wallet):"
    echo "  \$STAKING_ADDRESS"
    echo "  Faucet: https://starknet-faucet.vercel.app/"
    echo ""
    echo "Operational Address (Hot Wallet):"
    echo "  \$OPERATIONAL_ADDRESS"
    echo "  Faucet: https://faucet.quicknode.com/starknet/sepolia"
    echo ""
    echo "Rewards Address:"
    echo "  \$REWARDS_ADDRESS"
    echo "  Faucet: https://starknet-faucet.pk910.de/"
    echo ""
    echo "📝 Instructions:"
    echo "1. Visit each faucet URL"
    echo "2. Paste the corresponding address"
    echo "3. Request tokens (usually 0.1-1 STRK)"
    echo "4. Wait for confirmation"
    echo "5. Run: ./staking_manager.sh status"
else
    echo "Error: validator_config.json not found"
    exit 1
fi
EOF

chmod +x "$VALIDATOR_DIR/get_testnet_tokens.sh"

# Create phase2 completion marker
cat > "$VALIDATOR_DIR/phase2_complete.json" << EOF
{
    "phase": 2,
    "name": "Validator Staking Setup",
    "completed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
    "status": "success",
    "wallets": {
        "staking": "$STAKING_ADDRESS",
        "operational": "$OPERATIONAL_ADDRESS",
        "rewards": "$REWARDS_ADDRESS"
    },
    "scripts": [
        "staking_manager.sh",
        "get_testnet_tokens.sh"
    ],
    "note": "Simplified setup - install starkli for full functionality"
}
EOF

log "🎉 Phase 2 completed successfully!"
log "📊 Validator Setup:"
echo "  • Staking Address: $STAKING_ADDRESS"
echo "  • Operational Address: $OPERATIONAL_ADDRESS"
echo "  • Rewards Address: $REWARDS_ADDRESS"
echo ""
echo "📝 Next Steps:"
echo "  1. Get testnet tokens: ./get_testnet_tokens.sh"
echo "  2. Install starkli for full functionality: ./install_starkli.sh"
echo "  3. Check status: ./staking_manager.sh status"
echo ""
echo "⚠️  Note: This is a simplified setup. For full staking functionality, install starkli."


