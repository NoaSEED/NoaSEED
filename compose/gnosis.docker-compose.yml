# SEEDNodes - Docker Compose para Gnosis Chain
# Configuration for 108 validators

version: '3.8'

services:
  gnosis-beacon:
    image: sigp/lighthouse:latest
    container_name: gnosis-beacon
    restart: unless-stopped
    ports:
      - "9000:9000"  # Beacon API
      - "9001:9001"  # Metrics
    volumes:
      - gnosis_beacon_data:/var/lib/lighthouse
      - ./config/gnosis:/config
      - ${VALIDATOR_KEYS_DIR}:/keys
    environment:
      - GNOSIS_NETWORK=${GNOSIS_NETWORK}
      - GNOSIS_BEACON_URL=${GNOSIS_BEACON_URL}
    command: >
      lighthouse beacon_node
      --network gnosis
      --datadir /var/lib/lighthouse
      --http
      --http-address 0.0.0.0
      --http-port 9000
      --metrics
      --metrics-address 0.0.0.0
      --metrics-port 9001
      --checkpoint-sync-url ${GNOSIS_BEACON_URL}
      --max-peers ${LIGHTHOUSE_MAX_PEERS:-50}
      --target-peers ${LIGHTHOUSE_TARGET_PEERS:-25}
      --discovery-port ${LIGHTHOUSE_DISCOVERY_PORT:-9000}
    networks:
      - gnosis-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/eth/v1/node/syncing"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  gnosis-validator:
    image: sigp/lighthouse:latest
    container_name: gnosis-validator
    restart: unless-stopped
    volumes:
      - gnosis_validator_data:/var/lib/lighthouse
      - ${VALIDATOR_KEYS_DIR}:/keys
      - ${WITHDRAWAL_KEYS_DIR}:/withdrawal-keys
    environment:
      - GNOSIS_NETWORK=${GNOSIS_NETWORK}
    command: >
      lighthouse validator
      --network gnosis
      --datadir /var/lib/lighthouse
      --beacon-nodes http://gnosis-beacon:9000
      --validators-dir /keys
      --secrets-dir /keys
      --init-slashing-protection
      --metrics
      --metrics-address 0.0.0.0
      --metrics-port 9002
    depends_on:
      gnosis-beacon:
        condition: service_healthy
    networks:
      - gnosis-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9002/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  prometheus:
    image: prom/prometheus:latest
    container_name: gnosis-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/gnosis_rules.yml:/etc/prometheus/gnosis_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - gnosis-network

  grafana:
    image: grafana/grafana:latest
    container_name: gnosis-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-changeme}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
    networks:
      - gnosis-network

  node-exporter:
    image: prom/node-exporter:latest
    container_name: gnosis-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - gnosis-network

volumes:
  gnosis_beacon_data:
    driver: local
  gnosis_validator_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  gnosis-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

