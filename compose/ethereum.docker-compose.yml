# SEEDNodes - Docker Compose para Ethereum
# ConfiguraciÃ³n con Obol DVT y CSM

version: '3.8'

services:
  geth:
    image: ethereum/client-go:latest
    container_name: ethereum-geth
    restart: unless-stopped
    ports:
      - "8545:8545"  # RPC
      - "8546:8546"  # WebSocket
      - "30303:30303"  # P2P
    volumes:
      - geth_data:/root/.ethereum
      - ./config/geth:/config
    environment:
      - ETHEREUM_NETWORK=${ETHEREUM_NETWORK}
    command: >
      geth
      --mainnet
      --http
      --http.addr 0.0.0.0
      --http.port 8545
      --http.api eth,net,web3,personal,admin
      --ws
      --ws.addr 0.0.0.0
      --ws.port 8546
      --ws.api eth,net,web3,personal,admin
      --metrics
      --metrics.addr 0.0.0.0
      --metrics.port 6060
      --datadir /root/.ethereum
      --maxpeers ${GETH_MAX_PEERS:-50}
      --cache ${GETH_CACHE_SIZE:-4096}
    networks:
      - ethereum-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8545"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  lighthouse-beacon:
    image: sigp/lighthouse:latest
    container_name: ethereum-lighthouse-beacon
    restart: unless-stopped
    ports:
      - "9000:9000"  # Beacon API
      - "9001:9001"  # Metrics
    volumes:
      - lighthouse_beacon_data:/var/lib/lighthouse
      - ./config/lighthouse:/config
    environment:
      - ETHEREUM_NETWORK=${ETHEREUM_NETWORK}
    command: >
      lighthouse beacon_node
      --network mainnet
      --datadir /var/lib/lighthouse
      --http
      --http-address 0.0.0.0
      --http-port 9000
      --metrics
      --metrics-address 0.0.0.0
      --metrics-port 9001
      --checkpoint-sync-url ${ETHEREUM_BEACON_URL}
      --execution-endpoint http://geth:8551
      --execution-jwt /config/jwt.hex
      --max-peers ${LIGHTHOUSE_MAX_PEERS:-50}
      --target-peers ${LIGHTHOUSE_TARGET_PEERS:-25}
    depends_on:
      geth:
        condition: service_healthy
    networks:
      - ethereum-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/eth/v1/node/syncing"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  lighthouse-validator:
    image: sigp/lighthouse:latest
    container_name: ethereum-lighthouse-validator
    restart: unless-stopped
    volumes:
      - lighthouse_validator_data:/var/lib/lighthouse
      - ${VALIDATOR_KEYS_DIR}:/keys
      - ${WITHDRAWAL_KEYS_DIR}:/withdrawal-keys
    environment:
      - ETHEREUM_NETWORK=${ETHEREUM_NETWORK}
    command: >
      lighthouse validator
      --network mainnet
      --datadir /var/lib/lighthouse
      --beacon-nodes http://lighthouse-beacon:9000
      --validators-dir /keys
      --secrets-dir /keys
      --init-slashing-protection
      --metrics
      --metrics-address 0.0.0.0
      --metrics-port 9002
    depends_on:
      lighthouse-beacon:
        condition: service_healthy
    networks:
      - ethereum-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9002/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  obol-charon:
    image: obolnetwork/charon:latest
    container_name: ethereum-charon
    restart: unless-stopped
    ports:
      - "3610:3610"  # Charon API
      - "3611:3611"  # Metrics
    volumes:
      - charon_data:/opt/charon
      - ./config/charon:/config
    environment:
      - CHARON_CLUSTER_CONFIG_FILE=/config/cluster-config.json
    command: >
      charon
      --data-dir /opt/charon
      --config-file /config/cluster-config.json
      --p2p-external-hostname ${HOSTNAME}
      --p2p-external-ip ${EXTERNAL_IP}
      --api-address 0.0.0.0:3610
      --metrics-address 0.0.0.0:3611
    networks:
      - ethereum-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3610/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  prometheus:
    image: prom/prometheus:latest
    container_name: ethereum-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/ethereum_rules.yml:/etc/prometheus/ethereum_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - ethereum-network

  grafana:
    image: grafana/grafana:latest
    container_name: ethereum-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-changeme}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
    networks:
      - ethereum-network

  node-exporter:
    image: prom/node-exporter:latest
    container_name: ethereum-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - ethereum-network

volumes:
  geth_data:
    driver: local
  lighthouse_beacon_data:
    driver: local
  lighthouse_validator_data:
    driver: local
  charon_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ethereum-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
