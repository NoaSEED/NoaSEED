# SEED Ops - Starknet Makefile
# Institutional Node Operations Handbook (INOH)
#
# Uso: make [target]
# Autor: SEED Ops Team
# Fecha: 2024
# Versi√≥n: 1.0

.PHONY: help bootstrap harden deploy monitor backup incident all clean status logs

# Variables de configuraci√≥n
STARKNET_USER := starknet
STARKNET_HOME := /opt/starknet
SCRIPTS_DIR := scripts
COMPOSE_FILE := $(STARKNET_HOME)/starknet.docker-compose.yml

# Colores para output
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m # No Color

# Target por defecto
.DEFAULT_GOAL := help

# Ayuda
help: ## Mostrar esta ayuda
	@echo "$(GREEN)SEED Ops - Starknet Operations$(NC)"
	@echo "======================================"
	@echo ""
	@echo "Targets disponibles:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "Ejemplos de uso:"
	@echo "  make bootstrap    # Instalar dependencias y crear usuario"
	@echo "  make harden       # Configurar seguridad del sistema"
	@echo "  make deploy       # Desplegar validador Starknet"
	@echo "  make all          # Ejecutar todo el pipeline"
	@echo ""

# Verificaciones de prerrequisitos
check-root: ## Verificar que se ejecute como root
	@if [ $$(id -u) -ne 0 ]; then \
		echo "$(RED)Error: Este comando debe ejecutarse como root (sudo)$(NC)"; \
		exit 1; \
	fi

check-user: ## Verificar que el usuario starknet existe
	@if ! id "$(STARKNET_USER)" &> /dev/null; then \
		echo "$(RED)Error: Usuario $(STARKNET_USER) no existe. Ejecutar 'make bootstrap' primero.$(NC)"; \
		exit 1; \
	fi

check-docker: ## Verificar que Docker est√© funcionando
	@if ! systemctl is-active --quiet docker; then \
		echo "$(RED)Error: Docker no est√° ejecut√°ndose$(NC)"; \
		exit 1; \
	fi

# Target principal de bootstrap
bootstrap: check-root ## Instalar dependencias y crear usuario
	@echo "$(GREEN)üöÄ Iniciando bootstrap de Starknet...$(NC)"
	@$(SCRIPTS_DIR)/00_bootstrap.sh
	@echo "$(GREEN)‚úÖ Bootstrap completado exitosamente$(NC)"

# Target de hardening
harden: check-root check-user ## Configurar seguridad del sistema
	@echo "$(GREEN)üîí Iniciando hardening de seguridad...$(NC)"
	@$(SCRIPTS_DIR)/10_hardening.sh
	@echo "$(GREEN)‚úÖ Hardening completado exitosamente$(NC)"

# Target de despliegue
deploy: check-root check-user check-docker ## Desplegar validador Starknet
	@echo "$(GREEN)üèóÔ∏è  Iniciando despliegue de Starknet...$(NC)"
	@$(SCRIPTS_DIR)/20_deploy_starknet.sh
	@echo "$(GREEN)‚úÖ Despliegue completado exitosamente$(NC)"

# Target de monitoreo
monitor: check-root check-user check-docker ## Configurar monitoreo avanzado
	@echo "$(GREEN)üìä Iniciando configuraci√≥n de monitoreo...$(NC)"
	@$(SCRIPTS_DIR)/30_monitoring.sh
	@echo "$(GREEN)‚úÖ Monitoreo configurado exitosamente$(NC)"

# Target de backup
backup: check-root check-user ## Crear backup de configuraciones
	@echo "$(GREEN)üíæ Iniciando backup...$(NC)"
	@$(SCRIPTS_DIR)/40_backup.sh daily
	@echo "$(GREEN)‚úÖ Backup completado exitosamente$(NC)"

backup-weekly: check-root check-user ## Crear backup semanal
	@echo "$(GREEN)üíæ Iniciando backup semanal...$(NC)"
	@$(SCRIPTS_DIR)/40_backup.sh weekly
	@echo "$(GREEN)‚úÖ Backup semanal completado exitosamente$(NC)"

backup-monthly: check-root check-user ## Crear backup mensual
	@echo "$(GREEN)üíæ Iniciando backup mensual...$(NC)"
	@$(SCRIPTS_DIR)/40_backup.sh monthly
	@echo "$(GREEN)‚úÖ Backup mensual completado exitosamente$(NC)"

# Target de incidentes
incident: check-root check-user ## Procedimientos de respuesta a incidentes
	@echo "$(YELLOW)üö® Iniciando procedimiento de incidente...$(NC)"
	@$(SCRIPTS_DIR)/90_incident.sh medium
	@echo "$(GREEN)‚úÖ Procedimiento de incidente completado$(NC)"

incident-critical: check-root check-user ## Procedimiento de incidente cr√≠tico
	@echo "$(RED)üö® Iniciando procedimiento de incidente CR√çTICO...$(NC)"
	@$(SCRIPTS_DIR)/90_incident.sh critical
	@echo "$(GREEN)‚úÖ Procedimiento de incidente cr√≠tico completado$(NC)"

incident-high: check-root check-user ## Procedimiento de incidente alto
	@echo "$(YELLOW)‚ö†Ô∏è  Iniciando procedimiento de incidente ALTO...$(NC)"
	@$(SCRIPTS_DIR)/90_incident.sh high
	@echo "$(GREEN)‚úÖ Procedimiento de incidente alto completado$(NC)"

# Target principal - ejecutar todo el pipeline
all: bootstrap harden deploy monitor ## Ejecutar todo el pipeline
	@echo "$(GREEN)üéâ Pipeline completo ejecutado exitosamente$(NC)"
	@echo "$(GREEN)üìä Validador Starknet listo para operaci√≥n$(NC)"

# Target de verificaci√≥n de estado
status: check-user ## Verificar estado del validador
	@echo "$(GREEN)üìä Verificando estado del validador Starknet...$(NC)"
	@if [ -f "$(COMPOSE_FILE)" ]; then \
		cd $(STARKNET_HOME) && docker-compose -f starknet.docker-compose.yml ps; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Validador no desplegado. Ejecutar 'make deploy' primero.$(NC)"; \
	fi

# Target de logs
logs: check-user ## Mostrar logs del validador
	@echo "$(GREEN)üìã Mostrando logs del validador...$(NC)"
	@if [ -f "$(COMPOSE_FILE)" ]; then \
		cd $(STARKNET_HOME) && docker-compose -f starknet.docker-compose.yml logs --tail=50; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Validador no desplegado. Ejecutar 'make deploy' primero.$(NC)"; \
	fi

# Target de logs de seguimiento
logs-follow: check-user ## Seguir logs del validador en tiempo real
	@echo "$(GREEN)üìã Siguiendo logs del validador...$(NC)"
	@if [ -f "$(COMPOSE_FILE)" ]; then \
		cd $(STARKNET_HOME) && docker-compose -f starknet.docker-compose.yml logs -f; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Validador no desplegado. Ejecutar 'make deploy' primero.$(NC)"; \
	fi

# Target de reinicio
restart: check-user check-docker ## Reiniciar validador
	@echo "$(GREEN)üîÑ Reiniciando validador...$(NC)"
	@if [ -f "$(COMPOSE_FILE)" ]; then \
		cd $(STARKNET_HOME) && docker-compose -f starknet.docker-compose.yml restart; \
		echo "$(GREEN)‚úÖ Validador reiniciado exitosamente$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Validador no desplegado. Ejecutar 'make deploy' primero.$(NC)"; \
	fi

# Target de parada
stop: check-user check-docker ## Parar validador
	@echo "$(YELLOW)‚èπÔ∏è  Parando validador...$(NC)"
	@if [ -f "$(COMPOSE_FILE)" ]; then \
		cd $(STARKNET_HOME) && docker-compose -f starknet.docker-compose.yml stop; \
		echo "$(GREEN)‚úÖ Validador parado exitosamente$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Validador no desplegado.$(NC)"; \
	fi

# Target de inicio
start: check-user check-docker ## Iniciar validador
	@echo "$(GREEN)‚ñ∂Ô∏è  Iniciando validador...$(NC)"
	@if [ -f "$(COMPOSE_FILE)" ]; then \
		cd $(STARKNET_HOME) && docker-compose -f starknet.docker-compose.yml start; \
		echo "$(GREEN)‚úÖ Validador iniciado exitosamente$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Validador no desplegado. Ejecutar 'make deploy' primero.$(NC)"; \
	fi

# Target de limpieza
clean: check-root ## Limpiar instalaci√≥n (CUIDADO: elimina datos)
	@echo "$(RED)‚ö†Ô∏è  ADVERTENCIA: Esto eliminar√° todos los datos del validador$(NC)"
	@echo "$(RED)¬øEst√°s seguro? [y/N]$(NC)"
	@read -p " " -n 1 -r; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		echo "$(YELLOW)üßπ Limpiando instalaci√≥n...$(NC)"; \
		if [ -f "$(COMPOSE_FILE)" ]; then \
			cd $(STARKNET_HOME) && docker-compose -f starknet.docker-compose.yml down -v; \
		fi; \
		rm -rf $(STARKNET_HOME)/{data,keys,logs,config,backups,monitoring}; \
		userdel -r $(STARKNET_USER) 2>/dev/null || true; \
		groupdel $(STARKNET_USER) 2>/dev/null || true; \
		echo "$(GREEN)‚úÖ Instalaci√≥n limpiada exitosamente$(NC)"; \
	else \
		echo "$(YELLOW)Operaci√≥n cancelada$(NC)"; \
	fi

# Target de verificaci√≥n del sistema
check-system: ## Verificar especificaciones del sistema
	@echo "$(GREEN)üîç Verificando especificaciones del sistema...$(NC)"
	@echo "OS: $$(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
	@echo "Kernel: $$(uname -r)"
	@echo "CPU: $$(nproc) cores"
	@echo "RAM: $$(free -h | grep Mem | awk '{print $$2}')"
	@echo "Disk: $$(df -h / | awk 'NR==2 {print $$4}') disponible"
	@echo "Docker: $$(docker --version 2>/dev/null || echo 'No instalado')"

# Target de verificaci√≥n de red
check-network: ## Verificar conectividad de red
	@echo "$(GREEN)üåê Verificando conectividad de red...$(NC)"
	@if ping -c 1 8.8.8.8 &> /dev/null; then \
		echo "‚úÖ Conectividad a internet: OK"; \
	else \
		echo "$(RED)‚ùå Conectividad a internet: FALLO$(NC)"; \
	fi
	@if ping -c 1 alpha-mainnet.starknet.io &> /dev/null; then \
		echo "‚úÖ Conectividad a Starknet: OK"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Conectividad a Starknet: FALLO$(NC)"; \
	fi

# Target de verificaci√≥n de repositorios
check-repos: ## Verificar acceso a repositorios
	@echo "$(GREEN)üì¶ Verificando acceso a repositorios...$(NC)"
	@if curl -s https://download.docker.com/linux/ubuntu/gpg > /dev/null; then \
		echo "‚úÖ Docker repository: OK"; \
	else \
		echo "$(RED)‚ùå Docker repository: FALLO$(NC)"; \
	fi

# Target de verificaci√≥n de bootstrap
verify-bootstrap: check-user ## Verificar instalaci√≥n de bootstrap
	@echo "$(GREEN)‚úÖ Verificando bootstrap...$(NC)"
	@if id "$(STARKNET_USER)" &> /dev/null; then \
		echo "‚úÖ Usuario $(STARKNET_USER): OK"; \
	else \
		echo "$(RED)‚ùå Usuario $(STARKNET_USER): FALLO$(NC)"; \
	fi
	@if command -v docker &> /dev/null; then \
		echo "‚úÖ Docker: OK"; \
	else \
		echo "$(RED)‚ùå Docker: FALLO$(NC)"; \
	fi
	@if [ -d "$(STARKNET_HOME)" ]; then \
		echo "‚úÖ Directorio $(STARKNET_HOME): OK"; \
	else \
		echo "$(RED)‚ùå Directorio $(STARKNET_HOME): FALLO$(NC)"; \
	fi

# Target de verificaci√≥n de seguridad
verify-security: check-user ## Verificar configuraciones de seguridad
	@echo "$(GREEN)üîí Verificando configuraciones de seguridad...$(NC)"
	@if ufw status | grep -q "Status: active"; then \
		echo "‚úÖ Firewall UFW: OK"; \
	else \
		echo "$(RED)‚ùå Firewall UFW: FALLO$(NC)"; \
	fi
	@if systemctl is-active --quiet fail2ban; then \
		echo "‚úÖ Fail2ban: OK"; \
	else \
		echo "$(RED)‚ùå Fail2ban: FALLO$(NC)"; \
	fi
	@if systemctl is-active --quiet auditd; then \
		echo "‚úÖ Auditor√≠a: OK"; \
	else \
		echo "$(RED)‚ùå Auditor√≠a: FALLO$(NC)"; \
	fi

# Target de verificaci√≥n de configuraci√≥n
verify-config: check-user ## Verificar configuraci√≥n del validador
	@echo "$(GREEN)‚öôÔ∏è  Verificando configuraci√≥n...$(NC)"
	@if [ -f "$(STARKNET_HOME)/config/config.yaml" ]; then \
		echo "‚úÖ Archivo de configuraci√≥n: OK"; \
	else \
		echo "$(RED)‚ùå Archivo de configuraci√≥n: FALLO$(NC)"; \
	fi
	@if [ -f "$(COMPOSE_FILE)" ]; then \
		echo "‚úÖ Docker Compose: OK"; \
	else \
		echo "$(RED)‚ùå Docker Compose: FALLO$(NC)"; \
	fi

# Target de verificaci√≥n de monitoreo
verify-monitoring: check-user ## Verificar configuraci√≥n de monitoreo
	@echo "$(GREEN)üìä Verificando monitoreo...$(NC)"
	@if [ -d "$(STARKNET_HOME)/monitoring" ]; then \
		echo "‚úÖ Directorio de monitoreo: OK"; \
	else \
		echo "$(RED)‚ùå Directorio de monitoreo: FALLO$(NC)"; \
	fi
	@if netstat -tlnp | grep -q ":9090.*LISTEN"; then \
		echo "‚úÖ Prometheus: OK"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Prometheus: NO ACTIVO$(NC)"; \
	fi
	@if netstat -tlnp | grep -q ":3000.*LISTEN"; then \
		echo "‚úÖ Grafana: OK"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Grafana: NO ACTIVO$(NC)"; \
	fi

# Target de verificaci√≥n de backups
verify-backups: check-user ## Verificar configuraci√≥n de backups
	@echo "$(GREEN)üíæ Verificando backups...$(NC)"
	@if [ -d "$(STARKNET_HOME)/backups" ]; then \
		echo "‚úÖ Directorio de backups: OK"; \
		@if ls "$(STARKNET_HOME)/backups"/*.gpg 2>/dev/null | head -1 > /dev/null; then \
			echo "‚úÖ Archivos de backup: OK"; \
		else \
			echo "$(YELLOW)‚ö†Ô∏è  No hay archivos de backup$(NC)"; \
		fi; \
	else \
		echo "$(RED)‚ùå Directorio de backups: FALLO$(NC)"; \
	fi

# Target de informaci√≥n del sistema
info: ## Mostrar informaci√≥n completa del sistema
	@echo "$(GREEN)üìã Informaci√≥n del sistema SEED Ops Starknet$(NC)"
	@echo "=================================================="
	@echo ""
	@make check-system
	@echo ""
	@make check-network
	@echo ""
	@make verify-bootstrap
	@echo ""
	@make verify-security
	@echo ""
	@make verify-config
	@echo ""
	@make verify-monitoring
	@echo ""
	@make verify-backups
	@echo ""
	@echo "$(GREEN)üìä Estado del validador:$(NC)"
	@make status

# Target de mantenimiento diario
daily-check: check-user ## Verificaci√≥n diaria del sistema
	@echo "$(GREEN)üìÖ Ejecutando verificaci√≥n diaria...$(NC)"
	@make status
	@make check-system
	@echo "$(GREEN)‚úÖ Verificaci√≥n diaria completada$(NC)"

# Target de mantenimiento semanal
weekly-maintenance: check-user ## Mantenimiento semanal
	@echo "$(GREEN)üìÖ Ejecutando mantenimiento semanal...$(NC)"
	@make backup-weekly
	@echo "$(GREEN)‚úÖ Mantenimiento semanal completado$(NC)"

# Target de mantenimiento mensual
monthly-maintenance: check-user ## Mantenimiento mensual
	@echo "$(GREEN)üìÖ Ejecutando mantenimiento mensual...$(NC)"
	@make backup-monthly
	@echo "$(GREEN)‚úÖ Mantenimiento mensual completado$(NC)"

# Target de actualizaci√≥n del sistema
system-update: check-root ## Actualizar sistema operativo
	@echo "$(GREEN)üîÑ Actualizando sistema operativo...$(NC)"
	@apt-get update && apt-get upgrade -y
	@echo "$(GREEN)‚úÖ Sistema actualizado exitosamente$(NC)"

# Target de rotaci√≥n de logs
rotate-logs: check-user ## Rotar logs del sistema
	@echo "$(GREEN)üìã Rotando logs...$(NC)"
	@logrotate -f /etc/logrotate.d/starknet
	@echo "$(GREEN)‚úÖ Logs rotados exitosamente$(NC)"

# Target de verificaci√≥n de espacio en disco
check-disk: check-user ## Verificar espacio en disco
	@echo "$(GREEN)üíæ Verificando espacio en disco...$(NC)"
	@df -h
	@echo ""
	@echo "Uso de directorios principales:"
	@du -sh $(STARKNET_HOME)/* 2>/dev/null || echo "Directorio no encontrado"

# Target de an√°lisis de performance
performance-review: check-user ## An√°lisis de performance del sistema
	@echo "$(GREEN)üìà An√°lisis de performance...$(NC)"
	@echo "CPU: $$(top -bn1 | grep "Cpu(s)" | awk '{print $$2}' | cut -d'%' -f1)%"
	@echo "RAM: $$(free | grep Mem | awk '{printf("%.1f", $$3/$$2 * 100.0)}')%"
	@echo "Disco: $$(df / | awk 'NR==2 {print $$5}')"
	@echo "Procesos: $$(ps aux | wc -l)"
	@echo "Docker: $$(docker ps | wc -l) contenedores activos"

# Target de limpieza de logs
cleanup-logs: check-user ## Limpiar logs antiguos
	@echo "$(GREEN)üßπ Limpiando logs antiguos...$(NC)"
	@find /var/log/starknet -name "*.log.*" -mtime +7 -delete 2>/dev/null || true
	@find $(STARKNET_HOME)/logs -name "*.log.*" -mtime +7 -delete 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Logs antiguos limpiados$(NC)"

# Target de test de restauraci√≥n
test-restore: check-user ## Test de restauraci√≥n de backup
	@echo "$(GREEN)üß™ Probando restauraci√≥n de backup...$(NC)"
	@if [ -f "$(STARKNET_HOME)/scripts/40_backup.sh" ]; then \
		$(STARKNET_HOME)/scripts/40_backup.sh test; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Script de backup no encontrado$(NC)"; \
	fi

# Target de verificaci√≥n de integridad
verify-integrity: check-user ## Verificar integridad de archivos cr√≠ticos
	@echo "$(GREEN)üîç Verificando integridad...$(NC)"
	@if [ -f "$(STARKNET_HOME)/keys/backup.key" ]; then \
		echo "‚úÖ Clave de backup: OK"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Clave de backup: NO ENCONTRADA$(NC)"; \
	fi
	@if [ -f "$(STARKNET_HOME)/config/config.yaml" ]; then \
		echo "‚úÖ Configuraci√≥n: OK"; \
	else \
		echo "$(RED)‚ùå Configuraci√≥n: FALLO$(NC)"; \
	fi

# Target de reporte de estado
status-report: check-user ## Generar reporte de estado completo
	@echo "$(GREEN)üìä Generando reporte de estado...$(NC)"
	@echo "Reporte generado: $(STARKNET_HOME)/logs/status-report-$$(date +%Y%m%d_%H%M%S).txt"
	@make info > "$(STARKNET_HOME)/logs/status-report-$$(date +%Y%m%d_%H%M%S).txt" 2>&1

# Target de ayuda r√°pida
quick-help: ## Ayuda r√°pida para operaciones comunes
	@echo "$(GREEN)üöÄ Operaciones r√°pidas para SEED Ops Starknet$(NC)"
	@echo "=================================================="
	@echo ""
	@echo "$(GREEN)Despliegue inicial:$(NC)"
	@echo "  make all                    # Pipeline completo"
	@echo ""
	@echo "$(GREEN)Operaciones diarias:$(NC)"
	@echo "  make status                 # Verificar estado"
	@echo "  make logs                   # Ver logs"
	@echo "  make daily-check            # Verificaci√≥n diaria"
	@echo ""
	@echo "$(GREEN)Mantenimiento:$(NC)"
	@echo "  make backup                 # Backup diario"
	@echo "  make restart                # Reiniciar validador"
	@echo "  make weekly-maintenance     # Mantenimiento semanal"
	@echo ""
	@echo "$(GREEN)Emergencias:$(NC)"
	@echo "  make incident               # Incidente medio"
	@echo "  make incident-high          # Incidente alto"
	@echo "  make incident-critical      # Incidente cr√≠tico"
	@echo ""
	@echo "$(GREEN)Informaci√≥n:$(NC)"
	@echo "  make info                   # Informaci√≥n completa"
	@echo "  make help                   # Ayuda detallada"
