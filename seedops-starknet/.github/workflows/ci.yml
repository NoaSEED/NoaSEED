name: SEED Ops Starknet CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Ejecutar validaciones diarias a las 2:00 UTC
    - cron: '0 2 * * *'

env:
  STARKNET_USER: starknet
  STARKNET_HOME: /opt/starknet

jobs:
  validate-scripts:
    name: Validate Bash Scripts
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup shellcheck
      uses: reviewdog/action-shellcheck@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        reporter: github-pr-review
        
    - name: Validate script syntax
      run: |
        echo "üîç Validando sintaxis de scripts bash..."
        
        # Verificar que todos los scripts sean ejecutables
        chmod +x scripts/*.sh
        
        # Validar sintaxis de cada script
        for script in scripts/*.sh; do
          echo "Validando: $script"
          bash -n "$script"
          if [ $? -eq 0 ]; then
            echo "‚úÖ $script: Sintaxis v√°lida"
          else
            echo "‚ùå $script: Error de sintaxis"
            exit 1
          fi
        done
        
        echo "‚úÖ Todos los scripts tienen sintaxis v√°lida"
        
    - name: Validate script security
      run: |
        echo "üîí Validando seguridad de scripts..."
        
        # Verificar que los scripts usen set -euo pipefail
        for script in scripts/*.sh; do
          if ! grep -q "set -euo pipefail" "$script"; then
            echo "‚ùå $script: No usa set -euo pipefail"
            exit 1
          fi
          echo "‚úÖ $script: Configuraci√≥n de seguridad v√°lida"
        done
        
        echo "‚úÖ Todos los scripts cumplen est√°ndares de seguridad"
        
    - name: Validate script headers
      run: |
        echo "üìã Validando headers de scripts..."
        
        # Verificar que todos los scripts tengan headers apropiados
        for script in scripts/*.sh; do
          if ! grep -q "SEED Ops" "$script"; then
            echo "‚ùå $script: Header de SEED Ops no encontrado"
            exit 1
          fi
          if ! grep -q "Institutional Node Operations Handbook" "$script"; then
            echo "‚ùå $script: Referencia a INOH no encontrada"
            exit 1
          fi
          echo "‚úÖ $script: Header v√°lido"
        done
        
        echo "‚úÖ Todos los scripts tienen headers v√°lidos"

  validate-configs:
    name: Validate Configurations
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate Docker Compose
      run: |
        echo "üê≥ Validando Docker Compose..."
        
        # Verificar sintaxis del archivo docker-compose
        if [ -f "compose/starknet.docker-compose.yml" ]; then
          docker-compose -f compose/starknet.docker-compose.yml config
          echo "‚úÖ Docker Compose v√°lido"
        else
          echo "‚ùå Archivo docker-compose no encontrado"
          exit 1
        fi
        
    - name: Validate environment template
      run: |
        echo "üîß Validando template de variables de entorno..."
        
        # Verificar que el archivo de ejemplo existe
        if [ ! -f "env/starknet.env.example" ]; then
          echo "‚ùå Archivo de variables de entorno de ejemplo no encontrado"
          exit 1
        fi
        
        # Verificar que no contenga claves reales
        if grep -q "YOUR_API_KEY_HERE\|your_ethereum_api_key_here" "env/starknet.env.example"; then
          echo "‚úÖ Archivo de ejemplo no contiene claves reales"
        else
          echo "‚ùå Archivo de ejemplo puede contener claves reales"
          exit 1
        fi
        
        echo "‚úÖ Template de variables de entorno v√°lido"
        
    - name: Validate configuration template
      run: |
        echo "‚öôÔ∏è  Validando template de configuraci√≥n..."
        
        # Verificar que el archivo de configuraci√≥n existe
        if [ ! -f "templates/config.yaml.j2" ]; then
          echo "‚ùå Template de configuraci√≥n no encontrado"
          exit 1
        fi
        
        # Verificar que use variables de entorno
        if grep -q "\${.*}" "templates/config.yaml.j2"; then
          echo "‚úÖ Template usa variables de entorno"
        else
          echo "‚ùå Template no usa variables de entorno"
          exit 1
        fi
        
        echo "‚úÖ Template de configuraci√≥n v√°lido"

  validate-docs:
    name: Validate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate markdown files
      run: |
        echo "üìö Validando archivos markdown..."
        
        # Verificar que los archivos markdown existan
        required_docs=("README.md" "INOH/starknet-infra.md" "playbooks/starknet.md")
        
        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "‚ùå Documento requerido no encontrado: $doc"
            exit 1
          fi
          echo "‚úÖ $doc: Encontrado"
        done
        
        echo "‚úÖ Todos los documentos requeridos est√°n presentes"
        
    - name: Validate documentation links
      run: |
        echo "üîó Validando enlaces en documentaci√≥n..."
        
        # Verificar enlaces internos
        if grep -q "\[.*\]\(.*\)" README.md; then
          echo "‚úÖ README contiene enlaces"
        else
          echo "‚ùå README no contiene enlaces"
          exit 1
        fi
        
        echo "‚úÖ Enlaces en documentaci√≥n v√°lidos"

  validate-structure:
    name: Validate Repository Structure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate directory structure
      run: |
        echo "üìÅ Validando estructura del repositorio..."
        
        # Verificar directorios requeridos
        required_dirs=("INOH" "playbooks" "scripts" "compose" "templates" "env" ".github/workflows")
        
        for dir in "${required_dirs[@]}"; do
          if [ ! -d "$dir" ]; then
            echo "‚ùå Directorio requerido no encontrado: $dir"
            exit 1
          fi
          echo "‚úÖ $dir: Encontrado"
        done
        
        echo "‚úÖ Estructura del repositorio v√°lida"
        
    - name: Validate file permissions
      run: |
        echo "üîê Validando permisos de archivos..."
        
        # Verificar que los scripts sean ejecutables
        for script in scripts/*.sh; do
          if [ -x "$script" ]; then
            echo "‚úÖ $script: Ejecutable"
          else
            echo "‚ùå $script: No es ejecutable"
            exit 1
          fi
        done
        
        echo "‚úÖ Permisos de archivos v√°lidos"

  validate-makefile:
    name: Validate Makefile
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate Makefile syntax
      run: |
        echo "üîß Validando Makefile..."
        
        # Verificar que el Makefile existe
        if [ ! -f "Makefile" ]; then
          echo "‚ùå Makefile no encontrado"
          exit 1
        fi
        
        # Verificar sintaxis b√°sica del Makefile
        if make -n help > /dev/null 2>&1; then
          echo "‚úÖ Makefile tiene sintaxis v√°lida"
        else
          echo "‚ùå Makefile tiene errores de sintaxis"
          exit 1
        fi
        
    - name: Validate Makefile targets
      run: |
        echo "üéØ Validando targets del Makefile..."
        
        # Verificar targets requeridos
        required_targets=("bootstrap" "harden" "deploy" "monitor" "backup" "incident" "all")
        
        for target in "${required_targets[@]}"; do
          if make -n "$target" > /dev/null 2>&1; then
            echo "‚úÖ Target '$target': V√°lido"
          else
            echo "‚ùå Target '$target': Inv√°lido o no implementado"
            exit 1
          fi
        done
        
        echo "‚úÖ Todos los targets requeridos est√°n implementados"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker
      uses: docker/setup-buildx-action@v3
      
    - name: Test Docker Compose
      run: |
        echo "üß™ Probando Docker Compose..."
        
        # Crear directorio temporal para testing
        mkdir -p /tmp/test-starknet
        
        # Copiar archivos necesarios
        cp -r compose /tmp/test-starknet/
        cp -r templates /tmp/test-starknet/
        cp env/starknet.env.example /tmp/test-starknet/env/starknet.env
        
        # Crear directorios necesarios
        mkdir -p /tmp/test-starknet/opt/starknet/{data,keys,logs,config}
        
        # Probar configuraci√≥n del docker-compose
        cd /tmp/test-starknet
        docker-compose -f compose/starknet.docker-compose.yml config
        
        echo "‚úÖ Docker Compose v√°lido para testing"
        
    - name: Test script execution
      run: |
        echo "üß™ Probando ejecuci√≥n de scripts..."
        
        # Probar que los scripts se pueden parsear
        for script in scripts/*.sh; do
          echo "Probando: $script"
          bash -n "$script"
          echo "‚úÖ $script: Parseable"
        done
        
        echo "‚úÖ Todos los scripts son ejecutables"

  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check INOH compliance
      run: |
        echo "üìã Verificando cumplimiento INOH..."
        
        # Verificar que la documentaci√≥n institucional est√© presente
        if [ -f "INOH/starknet-infra.md" ]; then
          echo "‚úÖ Documentaci√≥n institucional presente"
          
          # Verificar contenido m√≠nimo
          if grep -q "Requerimientos de hardware" "INOH/starknet-infra.md"; then
            echo "‚úÖ Requerimientos de hardware documentados"
          else
            echo "‚ùå Requerimientos de hardware no documentados"
            exit 1
          fi
          
          if grep -q "Est√°ndares de seguridad" "INOH/starknet-infra.md"; then
            echo "‚úÖ Est√°ndares de seguridad documentados"
          else
            echo "‚ùå Est√°ndares de seguridad no documentados"
            exit 1
          fi
          
        else
          echo "‚ùå Documentaci√≥n institucional no encontrada"
          exit 1
        fi
        
        echo "‚úÖ Cumplimiento INOH verificado"
        
    - name: Check security standards
      run: |
        echo "üîí Verificando est√°ndares de seguridad..."
        
        # Verificar que no haya secretos en el c√≥digo
        if grep -r "password\|secret\|key\|token" --include="*.sh" --include="*.yml" --include="*.yaml" scripts/ compose/ templates/ | grep -v "example\|template\|placeholder"; then
          echo "‚ùå Posibles secretos encontrados en el c√≥digo"
          exit 1
        else
          echo "‚úÖ No se encontraron secretos en el c√≥digo"
        fi
        
        # Verificar que los scripts usen pr√°cticas seguras
        secure_practices=("set -euo pipefail" "chmod 600" "chown starknet:starknet")
        
        for practice in "${secure_practices[@]}"; do
          if grep -r "$practice" scripts/ > /dev/null; then
            echo "‚úÖ Pr√°ctica de seguridad encontrada: $practice"
          else
            echo "‚ö†Ô∏è  Pr√°ctica de seguridad no encontrada: $practice"
          fi
        done
        
        echo "‚úÖ Est√°ndares de seguridad verificados"

  final-report:
    name: Generate Final Report
    runs-on: ubuntu-latest
    needs: [validate-scripts, validate-configs, validate-docs, validate-structure, validate-makefile, security-scan, integration-test, compliance-check]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate validation report
      run: |
        echo "üìä Generando reporte de validaci√≥n..."
        
        # Crear reporte
        cat > validation-report.md << EOF
        # SEED Ops Starknet - Reporte de Validaci√≥n CI
        
        ## Resumen de Ejecuci√≥n
        - **Fecha:** $(date -u)
        - **Commit:** ${{ github.sha }}
        - **Branch:** ${{ github.ref_name }}
        
        ## Estado de Jobs
        
        EOF
        
        # Agregar estado de cada job
        for job in validate-scripts validate-configs validate-docs validate-structure validate-makefile security-scan integration-test compliance-check; do
          if [ "${{ needs.$job.result }}" == "success" ]; then
            echo "- ‚úÖ **$job:** Exitoso" >> validation-report.md
          elif [ "${{ needs.$job.result }}" == "failure" ]; then
            echo "- ‚ùå **$job:** Fall√≥" >> validation-report.md
          else
            echo "- ‚ö†Ô∏è  **$job:** ${{ needs.$job.result }}" >> validation-report.md
          fi
        done
        
        echo "" >> validation-report.md
        echo "## Recomendaciones" >> validation-report.md
        echo "" >> validation-report.md
        
        # Agregar recomendaciones basadas en resultados
        if [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "- üîí **Seguridad:** No se encontraron vulnerabilidades cr√≠ticas" >> validation-report.md
        else
          echo "- ‚ö†Ô∏è  **Seguridad:** Revisar resultados del escaneo de seguridad" >> validation-report.md
        fi
        
        if [ "${{ needs.compliance-check.result }}" == "success" ]; then
          echo "- üìã **Compliance:** Cumple est√°ndares INOH" >> validation-report.md
        else
          echo "- ‚ö†Ô∏è  **Compliance:** Revisar cumplimiento de est√°ndares INOH" >> validation-report.md
        fi
        
        echo "" >> validation-report.md
        echo "---" >> validation-report.md
        echo "*Reporte generado autom√°ticamente por GitHub Actions*" >> validation-report.md
        
        echo "‚úÖ Reporte de validaci√≥n generado"
        
    - name: Upload validation report
      uses: actions/upload-artifact@v3
      with:
        name: validation-report
        path: validation-report.md
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('validation-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });
