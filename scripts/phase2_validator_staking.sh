#!/bin/bash

# Phase 2: Validator Staking Setup
# Part of SEEDNodes Validator Dashboard

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"; }
progress() { echo -e "${BLUE}==> $1${NC}"; }
fail() { echo -e "${RED}[ERROR] $1${NC}"; exit 1; }

VALIDATOR_DIR="$HOME/starknet-validator"
WALLETS_DIR="$VALIDATOR_DIR/wallets"

# Check if we're being called from dashboard
if [[ "$1" == "--dashboard" ]]; then
    DASHBOARD_MODE=true
else
    DASHBOARD_MODE=false
fi

# Check if Phase 1 is complete
if [[ ! -f "$VALIDATOR_DIR/phase1_complete.json" ]]; then
    fail "Phase 1 must be completed first. Run phase1_sepolia_node.sh"
fi

progress "Starting Phase 2: Validator Staking Setup"

# Create wallets directory
mkdir -p "$WALLETS_DIR"
cd "$VALIDATOR_DIR"

# Install Rust and starkli if not present
progress "Installing Rust and starkli..."

if ! command -v rustc &> /dev/null; then
    log "Installing Rust..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source ~/.cargo/env
fi

if ! command -v starkli &> /dev/null; then
    log "Installing starkli..."
    cargo install starkli --locked
fi

# Set environment variables
export STARKNET_RPC_URL="http://localhost:9545"
export STARKNET_CHAIN_ID="0x534e5f5345504f4c4941"  # SN_SEPOLIA

# Create validator wallets
progress "Creating validator wallets..."

# 1. Staking wallet (cold wallet - for large amounts)
log "Creating staking wallet (cold)..."
starkli account oz init "$WALLETS_DIR/staking.json" --force
STAKING_ADDRESS=$(starkli account address "$WALLETS_DIR/staking.json")
log "Staking address: $STAKING_ADDRESS"

# 2. Operational wallet (hot wallet - for frequent operations)
log "Creating operational wallet (hot)..."
starkli account oz init "$WALLETS_DIR/operational.json" --force
OPERATIONAL_ADDRESS=$(starkli account address "$WALLETS_DIR/operational.json")
log "Operational address: $OPERATIONAL_ADDRESS"

# 3. Rewards wallet (for receiving rewards)
log "Creating rewards wallet..."
starkli account oz init "$WALLETS_DIR/rewards.json" --force
REWARDS_ADDRESS=$(starkli account address "$WALLETS_DIR/rewards.json")
log "Rewards address: $REWARDS_ADDRESS"

# Create validator configuration
progress "Creating validator configuration..."

cat > "$VALIDATOR_DIR/validator_config.json" << EOF
{
    "validator_info": {
        "staking_address": "$STAKING_ADDRESS",
        "operational_address": "$OPERATIONAL_ADDRESS",
        "rewards_address": "$REWARDS_ADDRESS",
        "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
    },
    "staking_parameters": {
        "minimum_stake_sepolia": "1000000000000000000",
        "minimum_stake_mainnet": "20000000000000000000000",
        "commission_rate": "500",
        "commission_max": "1000"
    },
    "contracts": {
        "staking_contract_sepolia": "0x04718e5e9c03c0b4c80c2b407dd1c7687b6d4b5d0c9a7c3e8f1d2a5b8c9e0f1a",
        "delegation_contract_sepolia": "0x04718e5e9c03c0b4c80c2b407dd1c7687b6d4b5d0c9a7c3e8f1d2a5b8c9e0f1b"
    }
}
EOF

# Create staking management script
progress "Creating staking management script..."

cat > "$VALIDATOR_DIR/staking_manager.sh" << 'EOF'
#!/bin/bash

# Starknet Validator Staking Manager
# Auto-generated by SEEDNodes Validator Dashboard

set -e

VALIDATOR_DIR="$HOME/starknet-validator"
WALLETS_DIR="$VALIDATOR_DIR/wallets"

# Load configuration
if [[ -f "$VALIDATOR_DIR/validator_config.json" ]]; then
    STAKING_ADDRESS=$(jq -r '.validator_info.staking_address' "$VALIDATOR_DIR/validator_config.json")
    OPERATIONAL_ADDRESS=$(jq -r '.validator_info.operational_address' "$VALIDATOR_DIR/validator_config.json")
    REWARDS_ADDRESS=$(jq -r '.validator_info.rewards_address' "$VALIDATOR_DIR/validator_config.json")
    STAKING_CONTRACT=$(jq -r '.contracts.staking_contract_sepolia' "$VALIDATOR_DIR/validator_config.json")
    DELEGATION_CONTRACT=$(jq -r '.contracts.delegation_contract_sepolia' "$VALIDATOR_DIR/validator_config.json")
else
    echo "Error: validator_config.json not found"
    exit 1
fi

# Set environment
export STARKNET_RPC_URL="http://localhost:9545"
export STARKNET_ACCOUNT="$WALLETS_DIR/staking.json"

# Functions
stake() {
    local amount=$1
    if [[ -z "$amount" ]]; then
        echo "Usage: stake <amount_in_wei>"
        echo "Example: stake 1000000000000000000  # 1 STRK"
        exit 1
    fi
    
    echo "Staking $amount wei to contract $STAKING_CONTRACT..."
    starkli invoke "$STAKING_CONTRACT" "stake" "u256:$amount"
}

set_commission() {
    local commission=$1
    if [[ -z "$commission" ]]; then
        echo "Usage: set_commission <commission_in_basis_points>"
        echo "Example: set_commission 500  # 5%"
        exit 1
    fi
    
    echo "Setting commission to $commission basis points..."
    starkli invoke "$STAKING_CONTRACT" "set_commission" "u256:$commission"
}

declare_operational() {
    echo "Declaring operational address: $OPERATIONAL_ADDRESS..."
    starkli invoke "$STAKING_CONTRACT" "declare_operational_address" "$OPERATIONAL_ADDRESS"
}

open_delegation() {
    echo "Opening delegation pool..."
    starkli invoke "$STAKING_CONTRACT" "open_delegation"
}

check_status() {
    echo "Validator Status:"
    echo "  Staking Address: $STAKING_ADDRESS"
    echo "  Operational Address: $OPERATIONAL_ADDRESS"
    echo "  Rewards Address: $REWARDS_ADDRESS"
    echo "  Staking Contract: $STAKING_CONTRACT"
    echo ""
    
    # Check balances
    echo "Checking balances..."
    starkli call 0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c7b7f8c8c "balanceOf" "$STAKING_ADDRESS"
}

# Main command handling
case "$1" in
    "stake")
        stake "$2"
        ;;
    "commission")
        set_commission "$2"
        ;;
    "operational")
        declare_operational
        ;;
    "delegation")
        open_delegation
        ;;
    "status")
        check_status
        ;;
    *)
        echo "Starknet Validator Staking Manager"
        echo ""
        echo "Usage: $0 <command> [args]"
        echo ""
        echo "Commands:"
        echo "  stake <amount>     - Stake STRK tokens"
        echo "  commission <rate>  - Set commission rate (basis points)"
        echo "  operational       - Declare operational address"
        echo "  delegation        - Open delegation pool"
        echo "  status            - Check validator status"
        echo ""
        echo "Examples:"
        echo "  $0 stake 1000000000000000000    # Stake 1 STRK"
        echo "  $0 commission 500               # Set 5% commission"
        echo "  $0 operational                  # Set operational address"
        echo "  $0 delegation                   # Open delegation"
        echo "  $0 status                       # Check status"
        ;;
esac
EOF

chmod +x "$VALIDATOR_DIR/staking_manager.sh"

# Create faucet helper script
progress "Creating faucet helper script..."

cat > "$VALIDATOR_DIR/get_testnet_tokens.sh" << 'EOF'
#!/bin/bash

# Get testnet tokens for validator setup
# Auto-generated by SEEDNodes Validator Dashboard

VALIDATOR_DIR="$HOME/starknet-validator"

if [[ -f "$VALIDATOR_DIR/validator_config.json" ]]; then
    STAKING_ADDRESS=$(jq -r '.validator_info.staking_address' "$VALIDATOR_DIR/validator_config.json")
    OPERATIONAL_ADDRESS=$(jq -r '.validator_info.operational_address' "$VALIDATOR_DIR/validator_config.json")
    REWARDS_ADDRESS=$(jq -r '.validator_info.rewards_address' "$VALIDATOR_DIR/validator_config.json")
    
    echo "🔗 Get testnet tokens for your validator addresses:"
    echo ""
    echo "Staking Address (Cold Wallet):"
    echo "  $STAKING_ADDRESS"
    echo "  Faucet: https://starknet-faucet.vercel.app/"
    echo ""
    echo "Operational Address (Hot Wallet):"
    echo "  $OPERATIONAL_ADDRESS"
    echo "  Faucet: https://faucet.quicknode.com/starknet/sepolia"
    echo ""
    echo "Rewards Address:"
    echo "  $REWARDS_ADDRESS"
    echo "  Faucet: https://starknet-faucet.pk910.de/"
    echo ""
    echo "📝 Instructions:"
    echo "1. Visit each faucet URL"
    echo "2. Paste the corresponding address"
    echo "3. Request tokens (usually 0.1-1 STRK)"
    echo "4. Wait for confirmation"
    echo "5. Run: ./staking_manager.sh status"
else
    echo "Error: validator_config.json not found"
    exit 1
fi
EOF

chmod +x "$VALIDATOR_DIR/get_testnet_tokens.sh"

# Create phase2 completion marker
cat > "$VALIDATOR_DIR/phase2_complete.json" << EOF
{
    "phase": 2,
    "name": "Validator Staking Setup",
    "completed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
    "status": "success",
    "wallets": {
        "staking": "$STAKING_ADDRESS",
        "operational": "$OPERATIONAL_ADDRESS",
        "rewards": "$REWARDS_ADDRESS"
    },
    "scripts": [
        "staking_manager.sh",
        "get_testnet_tokens.sh"
    ]
}
EOF

log "🎉 Phase 2 completed successfully!"
log "📊 Validator Setup:"
echo "  • Staking Address: $STAKING_ADDRESS"
echo "  • Operational Address: $OPERATIONAL_ADDRESS"
echo "  • Rewards Address: $REWARDS_ADDRESS"
echo ""
echo "📝 Next Steps:"
echo "  1. Get testnet tokens: ./get_testnet_tokens.sh"
echo "  2. Stake tokens: ./staking_manager.sh stake 1000000000000000000"
echo "  3. Set commission: ./staking_manager.sh commission 500"
echo "  4. Open delegation: ./staking_manager.sh delegation"

if [[ "$DASHBOARD_MODE" == "true" ]]; then
    echo "PHASE2_COMPLETE"
fi
