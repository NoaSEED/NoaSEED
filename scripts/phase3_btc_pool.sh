#!/bin/bash

# Phase 3: BTC Pool Integration
# Part of SEEDNodes Validator Dashboard

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"; }
progress() { echo -e "${BLUE}==> $1${NC}"; }
fail() { echo -e "${RED}[ERROR] $1${NC}"; exit 1; }

VALIDATOR_DIR="$HOME/starknet-validator"
POOLS_DIR="$VALIDATOR_DIR/btc-pools"

# Check if we're being called from dashboard
if [[ "$1" == "--dashboard" ]]; then
    DASHBOARD_MODE=true
else
    DASHBOARD_MODE=false
fi

# Check if Phase 2 is complete
if [[ ! -f "$VALIDATOR_DIR/phase2_complete.json" ]]; then
    fail "Phase 2 must be completed first. Run phase2_validator_staking.sh"
fi

progress "Starting Phase 3: BTC Pool Integration"

# Create pools directory
mkdir -p "$POOLS_DIR"
cd "$VALIDATOR_DIR"

# Load validator configuration
if [[ -f "$VALIDATOR_DIR/validator_config.json" ]]; then
    OPERATIONAL_ADDRESS=$(jq -r '.validator_info.operational_address' "$VALIDATOR_DIR/validator_config.json")
    STAKING_ADDRESS=$(jq -r '.validator_info.staking_address' "$VALIDATOR_DIR/validator_config.json")
else
    fail "validator_config.json not found"
fi

# Set environment
export STARKNET_RPC_URL="http://localhost:9545"
export STARKNET_ACCOUNT="$VALIDATOR_DIR/wallets/operational.json"

# Create BTC pool configuration
progress "Creating BTC pool configuration..."

cat > "$POOLS_DIR/btc_pool_config.json" << EOF
{
    "pool_info": {
        "name": "SEEDNodes BTC-STRK Pool",
        "type": "BTC-STRK Liquidity Pool",
        "dex": "JediSwap",
        "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
    },
    "contracts": {
        "jedi_factory": "0x00dad44c139a476c7a17fc8141e6db680e9abc9f56fe249a105094c44382c2fd",
        "jedi_router": "0x041fd22b238fa21cfcf5dd45a8548974d8263b3a531a60388412c96",
        "sith_factory": "0x07a6f98c03379b9513c84b5d870a8f8b1e4f8c8c",
        "sith_router": "0x0330d5c9e9b8d5b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b"
    },
    "tokens": {
        "eth": "0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c7b7f8c8c",
        "usdc": "0x053c91253bc9682c04929ca02ed00b3e423f6710d2ee7e0d5ebb06f3ecf368a8",
        "wbtc": "0x03fe2b97c1fd336e750087d68b9b867997fd64a2661ff3ca5a7c771641e8e7ac",
        "strk": "0x04718e5e9c03c0b4c80c2b407dd1c7687b6d4b5d0c9a7c3e8f1d2a5b8c9e0f1a"
    },
    "btc_bridges": {
        "satoshis_protocol": "https://bridge.satoshisprotocol.io",
        "allbridge": "https://app.allbridge.io",
        "layerzero": "https://stargate.finance"
    }
}
EOF

# Create BTC pool management script
progress "Creating BTC pool management script..."

cat > "$POOLS_DIR/btc_pool_manager.sh" << 'EOF'
#!/bin/bash

# BTC Pool Management Script
# Auto-generated by SEEDNodes Validator Dashboard

set -e

VALIDATOR_DIR="$HOME/starknet-validator"
POOLS_DIR="$VALIDATOR_DIR/btc-pools"
WALLETS_DIR="$VALIDATOR_DIR/wallets"

# Load configuration
if [[ -f "$POOLS_DIR/btc_pool_config.json" ]]; then
    JEDI_FACTORY=$(jq -r '.contracts.jedi_factory' "$POOLS_DIR/btc_pool_config.json")
    JEDI_ROUTER=$(jq -r '.contracts.jedi_router' "$POOLS_DIR/btc_pool_config.json")
    ETH_TOKEN=$(jq -r '.tokens.eth' "$POOLS_DIR/btc_pool_config.json")
    WBTC_TOKEN=$(jq -r '.tokens.wbtc' "$POOLS_DIR/btc_pool_config.json")
    STRK_TOKEN=$(jq -r '.tokens.strk' "$POOLS_DIR/btc_pool_config.json")
else
    echo "Error: btc_pool_config.json not found"
    exit 1
fi

# Set environment
export STARKNET_RPC_URL="http://localhost:9545"
export STARKNET_ACCOUNT="$WALLETS_DIR/operational.json"

# Functions
check_pools() {
    echo "Checking existing pools..."
    echo "JediSwap Factory: $JEDI_FACTORY"
    echo "JediSwap Router: $JEDI_ROUTER"
    echo ""
    
    # Check ETH-WBTC pool
    echo "Checking ETH-WBTC pool..."
    starkli call "$JEDI_FACTORY" "getPair" "$ETH_TOKEN $WBTC_TOKEN"
    
    # Check ETH-STRK pool
    echo "Checking ETH-STRK pool..."
    starkli call "$JEDI_FACTORY" "getPair" "$ETH_TOKEN $STRK_TOKEN"
}

create_pool() {
    local token_a=$1
    local token_b=$2
    
    if [[ -z "$token_a" || -z "$token_b" ]]; then
        echo "Usage: create_pool <token_a> <token_b>"
        echo "Example: create_pool $ETH_TOKEN $WBTC_TOKEN"
        exit 1
    fi
    
    echo "Creating pool for tokens:"
    echo "  Token A: $token_a"
    echo "  Token B: $token_b"
    
    starkli invoke "$JEDI_FACTORY" "createPair" "$token_a $token_b"
}

add_liquidity() {
    local token_a=$1
    local token_b=$2
    local amount_a=$3
    local amount_b=$4
    
    if [[ -z "$token_a" || -z "$token_b" || -z "$amount_a" || -z "$amount_b" ]]; then
        echo "Usage: add_liquidity <token_a> <token_b> <amount_a> <amount_b>"
        echo "Example: add_liquidity $ETH_TOKEN $WBTC_TOKEN 1000000000000000000 100000000"
        exit 1
    fi
    
    echo "Adding liquidity to pool..."
    echo "  Token A: $token_a (amount: $amount_a)"
    echo "  Token B: $token_b (amount: $amount_b)"
    
    # Approve tokens first
    starkli invoke "$token_a" "approve" "$JEDI_ROUTER u256:$amount_a"
    starkli invoke "$token_b" "approve" "$JEDI_ROUTER u256:$amount_b"
    
    # Add liquidity
    starkli invoke "$JEDI_ROUTER" "addLiquidity" \
        "$token_a $token_b u256:$amount_a u256:$amount_b u256:$((amount_a * 9 / 10)) u256:$((amount_b * 9 / 10)) $OPERATIONAL_ADDRESS u64:$(date +%s)"
}

swap_tokens() {
    local token_in=$1
    local token_out=$2
    local amount_in=$3
    local min_amount_out=$4
    
    if [[ -z "$token_in" || -z "$token_out" || -z "$amount_in" || -z "$min_amount_out" ]]; then
        echo "Usage: swap_tokens <token_in> <token_out> <amount_in> <min_amount_out>"
        echo "Example: swap_tokens $ETH_TOKEN $WBTC_TOKEN 1000000000000000000 90000000"
        exit 1
    fi
    
    echo "Swapping tokens..."
    echo "  From: $token_in (amount: $amount_in)"
    echo "  To: $token_out (min out: $min_amount_out)"
    
    # Approve token
    starkli invoke "$token_in" "approve" "$JEDI_ROUTER u256:$amount_in"
    
    # Execute swap
    starkli invoke "$JEDI_ROUTER" "swapExactTokensForTokens" \
        "u256:$amount_in u256:$min_amount_out array:[$token_in,$token_out] $OPERATIONAL_ADDRESS u64:$(date +%s)"
}

check_balances() {
    echo "Checking token balances..."
    echo ""
    
    # Get operational address
    OPERATIONAL_ADDRESS=$(starkli account address "$WALLETS_DIR/operational.json")
    echo "Operational Address: $OPERATIONAL_ADDRESS"
    echo ""
    
    # Check ETH balance
    echo "ETH Balance:"
    starkli call "$ETH_TOKEN" "balanceOf" "$OPERATIONAL_ADDRESS"
    
    # Check WBTC balance
    echo "WBTC Balance:"
    starkli call "$WBTC_TOKEN" "balanceOf" "$OPERATIONAL_ADDRESS"
    
    # Check STRK balance
    echo "STRK Balance:"
    starkli call "$STRK_TOKEN" "balanceOf" "$OPERATIONAL_ADDRESS"
}

bridge_info() {
    echo "BTC Bridge Information:"
    echo ""
    echo "üåâ Available Bridges:"
    echo "  1. Satoshi Protocol: https://bridge.satoshisprotocol.io"
    echo "  2. Allbridge Core: https://app.allbridge.io"
    echo "  3. LayerZero: https://stargate.finance"
    echo ""
    echo "üìù Bridge Process:"
    echo "  1. Deposit BTC to bridge address"
    echo "  2. Receive wrapped BTC (wBTC) on Starknet"
    echo "  3. Use wBTC in liquidity pools"
    echo "  4. Earn rewards from staking and trading"
    echo ""
    echo "‚ö†Ô∏è  Note: Use testnet bridges for Sepolia testing"
}

# Main command handling
case "$1" in
    "check")
        check_pools
        ;;
    "create")
        create_pool "$2" "$3"
        ;;
    "add")
        add_liquidity "$2" "$3" "$4" "$5"
        ;;
    "swap")
        swap_tokens "$2" "$3" "$4" "$5"
        ;;
    "balance")
        check_balances
        ;;
    "bridge")
        bridge_info
        ;;
    *)
        echo "BTC Pool Management Script"
        echo ""
        echo "Usage: $0 <command> [args]"
        echo ""
        echo "Commands:"
        echo "  check                    - Check existing pools"
        echo "  create <token_a> <token_b> - Create new pool"
        echo "  add <token_a> <token_b> <amount_a> <amount_b> - Add liquidity"
        echo "  swap <token_in> <token_out> <amount_in> <min_out> - Swap tokens"
        echo "  balance                 - Check token balances"
        echo "  bridge                  - Show bridge information"
        echo ""
        echo "Examples:"
        echo "  $0 check"
        echo "  $0 create $ETH_TOKEN $WBTC_TOKEN"
        echo "  $0 add $ETH_TOKEN $WBTC_TOKEN 1000000000000000000 100000000"
        echo "  $0 swap $ETH_TOKEN $WBTC_TOKEN 1000000000000000000 90000000"
        echo "  $0 balance"
        echo "  $0 bridge"
        ;;
esac
EOF

chmod +x "$POOLS_DIR/btc_pool_manager.sh"

# Create BTC staking integration script
progress "Creating BTC staking integration script..."

cat > "$POOLS_DIR/btc_staking_integration.sh" << 'EOF'
#!/bin/bash

# BTC Staking Integration Script
# Integrates BTC pools with Starknet validator staking

set -e

VALIDATOR_DIR="$HOME/starknet-validator"
POOLS_DIR="$VALIDATOR_DIR/btc-pools"

# Load configurations
if [[ -f "$VALIDATOR_DIR/validator_config.json" ]]; then
    STAKING_ADDRESS=$(jq -r '.validator_info.staking_address' "$VALIDATOR_DIR/validator_config.json")
    OPERATIONAL_ADDRESS=$(jq -r '.validator_info.operational_address' "$VALIDATOR_DIR/validator_config.json")
else
    echo "Error: validator_config.json not found"
    exit 1
fi

if [[ -f "$POOLS_DIR/btc_pool_config.json" ]]; then
    WBTC_TOKEN=$(jq -r '.tokens.wbtc' "$POOLS_DIR/btc_pool_config.json")
else
    echo "Error: btc_pool_config.json not found"
    exit 1
fi

echo "üîÑ BTC Staking Integration"
echo ""
echo "This script helps integrate BTC pools with Starknet validator staking:"
echo ""
echo "üìä Current Setup:"
echo "  ‚Ä¢ Validator Staking Address: $STAKING_ADDRESS"
echo "  ‚Ä¢ Operational Address: $OPERATIONAL_ADDRESS"
echo "  ‚Ä¢ WBTC Token: $WBTC_TOKEN"
echo ""
echo "üéØ Integration Steps:"
echo "  1. Bridge BTC to Starknet (get wBTC)"
echo "  2. Add wBTC to liquidity pools"
echo "  3. Stake LP tokens for additional rewards"
echo "  4. Monitor BTC staking power in validator"
echo ""
echo "üìà Benefits:"
echo "  ‚Ä¢ Earn from BTC staking (25% weight in staking power)"
echo "  ‚Ä¢ Earn from liquidity provision"
echo "  ‚Ä¢ Earn from validator attestations"
echo "  ‚Ä¢ Diversified reward streams"
echo ""
echo "üîó Next Steps:"
echo "  1. Run: ./btc_pool_manager.sh bridge"
echo "  2. Bridge BTC to get wBTC"
echo "  3. Run: ./btc_pool_manager.sh add [tokens]"
echo "  4. Monitor rewards in dashboard"
EOF

chmod +x "$POOLS_DIR/btc_staking_integration.sh"

# Create monitoring script for BTC pools
progress "Creating BTC pool monitoring script..."

cat > "$POOLS_DIR/monitor_btc_pools.sh" << 'EOF'
#!/bin/bash

# BTC Pool Monitoring Script
# Monitors BTC pool performance and rewards

set -e

VALIDATOR_DIR="$HOME/starknet-validator"
POOLS_DIR="$VALIDATOR_DIR/btc-pools"

# Load configuration
if [[ -f "$POOLS_DIR/btc_pool_config.json" ]]; then
    JEDI_FACTORY=$(jq -r '.contracts.jedi_factory' "$POOLS_DIR/btc_pool_config.json")
    ETH_TOKEN=$(jq -r '.tokens.eth' "$POOLS_DIR/btc_pool_config.json")
    WBTC_TOKEN=$(jq -r '.tokens.wbtc' "$POOLS_DIR/btc_pool_config.json")
else
    echo "Error: btc_pool_config.json not found"
    exit 1
fi

export STARKNET_RPC_URL="http://localhost:9545"

monitor_pools() {
    echo "üîÑ BTC Pool Monitoring - $(date)"
    echo "=================================="
    echo ""
    
    # Check pool status
    echo "üìä Pool Status:"
    echo "  ETH-WBTC Pool:"
    POOL_ADDRESS=$(starkli call "$JEDI_FACTORY" "getPair" "$ETH_TOKEN $WBTC_TOKEN" 2>/dev/null || echo "Not created")
    echo "    Address: $POOL_ADDRESS"
    
    if [[ "$POOL_ADDRESS" != "Not created" && "$POOL_ADDRESS" != "0x0" ]]; then
        echo "    Reserves:"
        starkli call "$POOL_ADDRESS" "getReserves" "[]" 2>/dev/null || echo "    Unable to fetch reserves"
        echo "    Total Supply:"
        starkli call "$POOL_ADDRESS" "totalSupply" "[]" 2>/dev/null || echo "    Unable to fetch supply"
    fi
    
    echo ""
    
    # Check validator status
    echo "‚ö° Validator Status:"
    if [[ -f "$VALIDATOR_DIR/validator_config.json" ]]; then
        STAKING_ADDRESS=$(jq -r '.validator_info.staking_address' "$VALIDATOR_DIR/validator_config.json")
        echo "  Staking Address: $STAKING_ADDRESS"
        
        # Check STRK balance
        echo "  STRK Balance:"
        starkli call 0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c7b7f8c8c "balanceOf" "$STAKING_ADDRESS" 2>/dev/null || echo "  Unable to fetch balance"
    fi
    
    echo ""
    echo "üîÑ Next check in 60 seconds..."
}

# Continuous monitoring
if [[ "$1" == "--continuous" ]]; then
    while true; do
        monitor_pools
        sleep 60
    done
else
    monitor_pools
fi
EOF

chmod +x "$POOLS_DIR/monitor_btc_pools.sh"

# Create phase3 completion marker
cat > "$VALIDATOR_DIR/phase3_complete.json" << EOF
{
    "phase": 3,
    "name": "BTC Pool Integration",
    "completed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
    "status": "success",
    "pools": {
        "directory": "$POOLS_DIR",
        "config": "btc_pool_config.json"
    },
    "scripts": [
        "btc_pool_manager.sh",
        "btc_staking_integration.sh",
        "monitor_btc_pools.sh"
    ],
    "features": [
        "BTC-STRK liquidity pools",
        "JediSwap integration",
        "BTC staking power integration",
        "Pool monitoring",
        "Bridge information"
    ]
}
EOF

log "üéâ Phase 3 completed successfully!"
log "üìä BTC Pool Setup:"
echo "  ‚Ä¢ Pool Directory: $POOLS_DIR"
echo "  ‚Ä¢ Management Script: btc_pool_manager.sh"
echo "  ‚Ä¢ Integration Script: btc_staking_integration.sh"
echo "  ‚Ä¢ Monitoring Script: monitor_btc_pools.sh"
echo ""
echo "üìù Next Steps:"
echo "  1. Bridge BTC: ./btc_pool_manager.sh bridge"
echo "  2. Check pools: ./btc_pool_manager.sh check"
echo "  3. Add liquidity: ./btc_pool_manager.sh add [tokens]"
echo "  4. Monitor: ./monitor_btc_pools.sh --continuous"
echo ""
echo "üéØ BTC Staking Benefits:"
echo "  ‚Ä¢ 25% weight in validator staking power"
echo "  ‚Ä¢ Additional rewards from liquidity provision"
echo "  ‚Ä¢ Diversified income streams"

if [[ "$DASHBOARD_MODE" == "true" ]]; then
    echo "PHASE3_COMPLETE"
fi


